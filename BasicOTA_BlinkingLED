/*
;----------------------------------------------------------
;Tittle: Over The Air(OTA) programming using ESP8266
;----------------------------------------------------------
;Program Detail: Enbles "Over The Air"(OTA) functionality 
                        in the ESP8266 microcontroller 
;----------------------------------------------------------
;Purpose: To demosntrate "Over The air" programming in the 
          esp82866 microcontroller, meaning we can 
          upload code into the microcontroller without having 
          to physically be connected to the computer. This 
          program achieves this by uploading a blink LED
          sketch along with the OTA sketch.
;Inputs: Local network communication
;Outputs: Blinking LED
;Date:10/6/22
;Compiler: Arduino 1.8.19
;Author: Jorge Solorio
;Versions: 
           V1: Testing OTA functionality
           V2: Sending Blinking LED program with OTA
;--------------------------------------------------------
;File Dependencies:
#include <ESP8266WiFi.h>
#include <ESP8266mDNS.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>
;-------------------------------------------------------
;Main program
;------------------------------------------------------

 */
 
#include <ESP8266WiFi.h>
#include <ESP8266mDNS.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>

#ifndef STASSID
#define STASSID "********"
#define STAPSK  "********"
#endif

const char* ssid = STASSID;
const char* password = STAPSK;


const int led = LED_BUILTIN;
unsigned long previousMillis = 0;
const long interval = 1000;
int ledState = LOW;

void setup() {

   pinMode(led,OUTPUT);
  Serial.begin(115200);
  Serial.println("Booting");
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.waitForConnectResult() != WL_CONNECTED) {
    Serial.println("Connection Failed! Rebooting...");
    delay(5000);
    ESP.restart();
    
  }

  // Port defaults to 8266
  // ArduinoOTA.setPort(8266);

  // Hostname defaults to esp8266-[ChipID]
  // ArduinoOTA.setHostname("myesp8266");

  // No authentication by default
  // ArduinoOTA.setPassword("admin");

  // Password can be set with it's md5 value as well
  // MD5(admin) = 21232f297a57a5a743894a0e4a801fc3
  // ArduinoOTA.setPasswordHash("21232f297a57a5a743894a0e4a801fc3");

  ArduinoOTA.onStart([]() {
    String type;
    if (ArduinoOTA.getCommand() == U_FLASH) {
      type = "sketch";
    } else { // U_FS
      type = "filesystem";
    }

    // NOTE: if updating FS this would be the place to unmount FS using FS.end()
    Serial.println("Start updating " + type);
  });
  ArduinoOTA.onEnd([]() {
    Serial.println("\nEnd");
  });
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
  });
  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("Error[%u]: ", error);
    if (error == OTA_AUTH_ERROR) {
      Serial.println("Auth Failed");
    } else if (error == OTA_BEGIN_ERROR) {
      Serial.println("Begin Failed");
    } else if (error == OTA_CONNECT_ERROR) {
      Serial.println("Connect Failed");
    } else if (error == OTA_RECEIVE_ERROR) {
      Serial.println("Receive Failed");
    } else if (error == OTA_END_ERROR) {
      Serial.println("End Failed");
    }
  });
  ArduinoOTA.begin();
  Serial.println("Ready");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}

void loop() {
  ArduinoOTA.handle();

  unsigned long currentMillis = millis();
  if(currentMillis - previousMillis >= interval){
    previousMillis = currentMillis;
    ledState = not(ledState);
    digitalWrite(led, ledState);
  }

}
